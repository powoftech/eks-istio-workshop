apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kube-prometheus-stack
  namespace: argocd
  # Add finalizer to ensure clean deletion of all resources
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    # This is the repository where the Helm chart is hosted
    repoURL: https://prometheus-community.github.io/helm-charts
    # The name of the chart we want to deploy
    chart: kube-prometheus-stack
    # Pin to a specific, stable version of the chart
    targetRevision: "76.3.0"
    helm:
      # These values customize the installation. This is the GitOps way of configuring software.
      values: |
        # -- Create a dedicated 'monitoring' namespace for all these components
        namespace: "monitoring"

        # -- Grafana Configuration
        grafana:
          # This makes the default Grafana admin password static.
          # In a real production system, you should manage this via a secrets manager.
          adminPassword: "prom-operator"
          # Persist Grafana dashboards and configuration across restarts
          persistence:
            enabled: true
            type: pvc
            size: 10Gi
            # Use a standard storage class. EKS provides 'gp2' or 'gp3' by default.
            storageClassName: "gp2"
          # Import default dashboards for Kubernetes visibility
          sidecar:
            dashboards:
              enabled: true
              label: grafana_dashboard

        # -- Prometheus Configuration
        prometheus:
          prometheusSpec:
            # Persist Prometheus metrics data across restarts
            storageSpec:
              volumeClaimTemplate:
                spec:
                  storageClassName: "gp2"
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 50Gi
            # Define how long to keep metrics data
            retention: 15d
  destination:
    server: https://kubernetes.default.svc
    # Deploy this application into the 'monitoring' namespace
    namespace: monitoring
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      # -- IMPORTANT: This tells ArgoCD to create the 'monitoring' namespace if it doesn't exist.
      - CreateNamespace=true
      - ServerSideApply=true
